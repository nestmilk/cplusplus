#include <stdio.h>
#include <stdbool.h>
#include <ctype.h>
#include <string.h>

const int size=5;
void display(char board[size][size]);
void display_b(bool moves[size][size]);
bool valid_move(char(*board)[size][size],int pl_row,int pl_col,bool curr_player);
void make_all_moves (char (*board)[size][size],int pl_row,int pl_col,bool curr_player);
void make_a_move(char (*board)[size][size],int pl_row,int pl_col,bool curr_player);

const char play1='O';
const char play2='*';
char player=true;//true for play1, false for play2;


int main (int argc,char * argv[]){
	char board[size][size];
	
	bool moves[size][size];
	
	int row=0;
	int col=0;
	int place_row=0;
	int place_col=0;
	int no_of_moves=0;
	
	
	char again;
	
	printf("This game is Gomoku!\nNow, it is just for two sb!\nPlay1 is 'O'; Play2 is '*'");
	
	
	
	do{
		no_of_moves=0;//initialize the number of steps!
		
		for(row=0;row<size;++row){ //for board initialization!	
			for(col=0;col<size;++col){
			board[row][col]=' ';
			}
		}
		display(board);
		
		player=!player;//change the player for next do-while cycle!
		
		do{
			player=!player;
			
			printf("\n%s chooses the place for puting the '%c' chess!\n",player? "play1":"play2",player? play1:play2);
			for(;;){
				
				int x;
				char y;
				scanf("%d%c",&x,&y);
				place_row=--x;
				place_col=y-'a';
			
				if(place_row<0||place_row>=size||place_col<0||place_col>=size||board[place_row][place_col]!=' '){
					printf("%s place a wrong place,please input again!\n",player? "play1":"play2");
				}else{
					board[place_row][place_col]=player? play1:play2; //put the player chess!
					++no_of_moves;
					
					printf("\n%d\n",no_of_moves);
					
					make_all_moves(&board,place_row,place_col,player);
					
					break;
				}
			}
			
			display(board);

			
		}while(no_of_moves<size*size);//now is for checking, should be changed after!
		
		printf("\nDo you like a new game!\n");
		printf("will you play again!y or n\n");
		
		fflush(stdin);
		
		scanf("%c",&again);
		again=tolower(again);
		
	}while(again=='y');//now is for checking if you will play again!
	
	return 0;
}

void display (char board[size][size]){
	char col_label='a';
	printf("\n  ");
	
	int col=0;
	for (;col<size;col++){
		printf("  %c ",col_label+col);
	}
	
	printf("\n  +");
	col=0;
	for(;col<size;++col){
		printf("---+");
	}
	
	col=0;
	int row=0;
	for(;row<size;++row){
		printf("\n");
		
		printf("%d |",row+1);
		col=0;
		for(;col<size;++col){
			printf(" %c |",board[row][col]);
		}
		
		col=0;
		printf("\n  +");
		for(;col<size;++col){
			printf("---+");
		}
	}
}

void display_b(bool moves[size][size]){
	char col_label='a';
	printf("\n  ");
	
	int col=0;
	for (;col<size;col++){
		printf("  %c ",col_label+col);
	}
	
	printf("\n  +");
	col=0;
	for(;col<size;++col){
		printf("---+");
	}
	
	col=0;
	int row=0;
	for(;row<size;++row){
		printf("\n");
		
		printf("%d |",row+1);
		col=0;
		for(;col<size;++col){
			printf(" %d |",moves[row][col]);
		}
		
		col=0;
		printf("\n  +");
		for(;col<size;++col){
			printf("---+");
		}
	}
}

bool valid_move(char(*board)[size][size],int pl_row,int pl_col,bool curr_player){ //result is inside *moves[][]!
	int x=0;
	int y=0;
	int row=0;
	int col=0;
	int rowdelta=0;
	int coldelta=0;
	char opponent=curr_player?play2:play1;
	char player=curr_player?play1:play2;
	
	if(pl_row<0||pl_row>=size||pl_col<0||pl_col>=size) //exceed the range, breakÔºÅ
		return;
	
	if((*board)[pl_row][pl_col]!=player)//if the checked position is not player, break!
		return;
	
	
	for(rowdelta=-1;rowdelta<=1;rowdelta++){      
		for(coldelta=-1;coldelta<=1;coldelta++){//check the 8 squares around the target position;
			x=pl_row+rowdelta;
			y=pl_col+coldelta;
			
		 if(x<0 || x>size || y<0 || y>size ||(rowdelta==0 && coldelta==0))
			  continue;
			
		 if((*board)[x][y]==opponent){ 
				
			for(;;){
				x+=rowdelta;
				y+=coldelta;
				if(x<0 || x>size || y<0 || y>size ||((*board)[x][y]==' '))
					break;
				if((*board)[x][y]==player){
					return true;
				}
			}
		 }
	  }
	}
}

void make_all_moves (char (*board)[size][size],int pl_col,int pl_row,bool curr_player){
	int row=0;
	int col=0;
	char opponent=curr_player?play2:play1;
	char player=curr_player?play1:play2;
	char pre_board[size][size];
	int count=1;
	
	for(row=0;row<size;row++){
		for(col=0;col<size;col++){
			pre_board[row][col]=(*board)[row][col];
		}
	}
	
	make_a_move(board,pl_col,pl_row,curr_player);
	
	while(count!=0){
		count=0;
		for(row=0;row<size;row++){
			for(col=0;col<size;col++){
				if( (pre_board[row][col]!=(*board)[row][col]) && (row!=pl_row&&col!=pl_col)){
					make_a_move(board,row,col,curr_player);
				}
			}
		}
	
		for(row=0;row<size;row++){
			for(col=0;col<size;col++){
				if(pre_board[row][col]!=(*board)[row][col]){
					pre_board[row][col]=(*board)[row][col];
					++count;
				}
			}
		}
	}
	
	
}

void make_a_move(char (*board)[size][size],int pl_row,int pl_col,bool curr_player){//change the board based on current position. 
	int row=0;
	int col=0;
	int x=0;
	int y=0;
	int rowdelta=0;
	int coldelta=0;
	
	char opponent=curr_player?play2:play1;
	char player=curr_player?play1:play2;
	
	if(!(valid_move(board,pl_row,pl_col,curr_player))) 
		return;
	
	for(rowdelta=-1;rowdelta<=1;rowdelta++){      
		for(coldelta=-1;coldelta<=1;coldelta++){//check the 8 squares around the target position;
			x=pl_row+rowdelta;
			y=pl_col+coldelta;
			
		 if(x<0 || x>size || y<0 || y>size ||(rowdelta==0 && coldelta==0))
			  continue;
			
		 if((*board)[x][y]==opponent){ 
				
			for(;;){
				x+=rowdelta;
				y+=coldelta;
				if(x<0 || x>size || y<0 || y>size ||((*board)[x][y]==' '))
					break;
				if((*board)[x][y]==player){
					while((*board)[x-=rowdelta][y-=coldelta]==opponent){
						(*board)[x][y]=player;
					}
					break;
				}
			}
		 }
	  }
	}
	
}
